<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2014-08-29 02:22"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Breaching Silos</title>
<link>http://jrclarkin.wordpress.com</link>
<description>Sharing - the key to learning</description>
<pubDate>Fri, 29 Aug 2014 02:22:30 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://jrclarkin.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>jrclarkin</wp:author_login>
  <wp:author_email>j.r.clarkin@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[jrclarkin]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>1342</wp:term_id>
  <wp:category_nicename>education</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Education]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>660</wp:term_id>
  <wp:category_nicename>people</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[People]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>581</wp:term_id>
  <wp:category_nicename>software</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Software]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>267305</wp:term_id>
  <wp:category_nicename>testing-software</wp:category_nicename>
  <wp:category_parent>software</wp:category_parent>
  <wp:cat_name><![CDATA[Testing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>6561214</wp:term_id>
  <wp:category_nicename>coding-software</wp:category_nicename>
  <wp:category_parent>software</wp:category_parent>
  <wp:cat_name><![CDATA[Coding]]></wp:cat_name>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title> &#187; Breaching Silos</title>
		<link>http://jrclarkin.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>http://jrclarkin.wordpress.com/about/</link>
  <pubDate>Thu, 21 Feb 2013 12:22:00 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[I am a software craftsman, always trying to increase and improve both my understanding of the things we build as well as my ability to communicate those understandings.

I have worn many labels, including...
<ul>
	<li>Developer (Junior, Senior, Java, Web, Automation, ...)</li>
	<li><span style="line-height:1.5;">Leader (Team, Technical, Project, ...)</span></li>
	<li><span style="line-height:1.5;">Designer</span></li>
	<li>Architect</li>
	<li>Tester</li>
</ul>
I always wear aspects of these responsibilities regardless of formal title.

I aim to follow these practices:
<ul>
	<li><a style="line-height:1.5;" href="http://www.8thlight.com/principles">Principles of Software Craftsmanship</a></li>
	<li><a href="http://context-driven-testing.com/">Context Driven Testing</a></li>
	<li><a href="http://agilemanifesto.org/">Agile Manifesto</a> (but not necessarily Agile/Scrum Process)</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2013-02-21 12:22:00</wp:post_date>
  <wp:post_date_gmt>2013-02-21 12:22:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Week 3 - ... Gathers No Moss</title>
  <link>http://jrclarkin.wordpress.com/2014/02/07/gathers-no-moss/</link>
  <pubDate>Sat, 08 Feb 2014 03:31:45 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=5</guid>
  <description/>
  <content:encoded><![CDATA[This week the team said farewell to a valuable teacher: <a href="http://testingthoughts.com/">Paul Holland</a>. He had joined us for a fixed duration to learn who we are, share his observations and teach his knowledge. I am glad to have met him, and hope to continue to learn from not just his experiences but those of his fellow <a href="http://context-driven-testing.com/">Context-Driven</a> Testers.

In other news... the automation stone is rolling downhill gathering speed. We have offered to train others in using <a href="http://docs.seleniumhq.org/">Selenium</a> to author automated Web scripts. After talking to fellow members of the department, we have thirty interested individuals (including some managers)!

We're going about the training in a new way for us, as a conversation and improv demo. Most meetings would have been a room of 30 people staring at a power point presentation for an hour. Instead we will host a group of five at a time and ask them what they already know, what they want to know, and show them how we might solve a similar situation using Selenium. I think it will be fun even though the first one will be uncomfortable as it is a new experience :)

Late in the week, my partner in automation research and I were inspired: why not use <a href="http://d3js.org/">d3.js</a> to render information about Domain Model of a product? For <a href="http://junit.org/">JUnit</a> functional checks, we could surface the results by Entity of a product to help owners prioritize deeper analysis. This tool is going well, and hopefully this month we can share it with the community :P

&nbsp;

Exciting times.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2014-02-07 22:31:45</wp:post_date>
  <wp:post_date_gmt>2014-02-08 03:31:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gathers-no-moss</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adventures in Test Automation Land</title>
  <link>http://jrclarkin.wordpress.com/2014/01/08/adventures-in-test-automation-land/</link>
  <pubDate>Wed, 08 Jan 2014 12:47:05 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=6</guid>
  <description/>
  <content:encoded><![CDATA[[Note: The term "Automated Test" is slowly being pushed to a simplified rename as "Check". This is being put forward by the software testing community to disambiguate between the less intelligent verification done by a machine vs. the intuitive and engaged verification that is only achievable via organic minds.]

Starting this month, I shall be adopting a new role as a test automation tools developer. What this means is that I will be exploring and analyzing areas for automation. I will research tools and|or build frameworks to facilitate software verification.

I am hoping to log my learning and growth on this voyage, and welcome feedback from the community at large. "Fail early - Fail often" is a great mantra to self-development, and only by exposing my ignorance can such opportunities occur :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2014-01-08 12:47:05</wp:post_date>
  <wp:post_date_gmt>2014-01-08 12:47:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adventures-in-test-automation-land</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Identicons</title>
  <link>http://jrclarkin.wordpress.com/?p=8</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=8</guid>
  <description/>
  <content:encoded><![CDATA[[What is an identicon]

[Go over icon breakdown: quadrants, symmetry, pictograms]

[Uniqueness / Probability]

[Algorithm: converting input to binary choices]

[Image generation]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2014-01-08 13:07:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding-software"><![CDATA[Coding]]></category>
  <category domain="category" nicename="software"><![CDATA[Software]]></category>
</item>
<item>
  <title>Week 0 - Learning and Assimilating</title>
  <link>http://jrclarkin.wordpress.com/2014/01/18/learning-and-assimilating/</link>
  <pubDate>Sat, 18 Jan 2014 01:51:30 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=11</guid>
  <description/>
  <content:encoded><![CDATA[I may be new to the testing team at work, but I am no stranger to the culture exposed on the internet. I have long been a reader of many online blogs regarding testing. To name a few of my regular reads:
<ul>
	<li>Keith Klain's <a href="http://qualityremarks.com/">Quality Remarks</a></li>
	<li>James Bach's <a href="http://www.satisfice.com/blog/">Satisfice</a></li>
	<li>Andy Glover's <a href="http://cartoontester.blogspot.ca/">Cartoon Tester</a></li>
	<li>Scott Barber's <a href="http://scott-barber.blogspot.ca/">Peak Performance</a> (infrequent updates)</li>
	<li>Jonathan Kohl's <a href="http://www.kohl.ca/blog/">blog</a></li>
	<li>Michael Bolton's <a href="http://www.developsense.com/blog/">Develop Sense</a></li>
	<li>Anne-Marie Charett's <a href="http://mavericktester.com/">Maverick Tester</a></li>
	<li>Cem Kaner's <a href="http://kaner.com/">Blog</a></li>
</ul>
On top of that, if you watch twitter, it is a hotbed of conversations and battles on the definition of "Testing"  and the visionary future of the field.

I wish I knew where the similar meta-level conversations happen around other aspects of software craftmanship. Most conversations I have spotted are to highlight the latest cool tool or technology. The focus on the long-term sustainability and improvements might not be happening in the recorded public spaces.

Speaking of culture, I am a partial stranger to the culture of testers at my work. Luckily I often talk to members of the team, but that is different from being fully submerged in the plights and passions of the individuals. Now I shall strive for a deeper empathy.

I am listening to conversations and asking questions. I hope to be able to contribute meaningfully to my new family.

I need to give thought to my direction, as there are many roads that can be traveled.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2014-01-18 01:51:30</wp:post_date>
  <wp:post_date_gmt>2014-01-18 01:51:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learning-and-assimilating</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Week 1 - Changing Gears: Manual &amp; Automatic</title>
  <link>http://jrclarkin.wordpress.com/2014/01/24/changing-gears/</link>
  <pubDate>Fri, 24 Jan 2014 02:40:22 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=21</guid>
  <description/>
  <content:encoded><![CDATA[My first week in, and I am being exposed to my team mates' interests.

My cube mate has done some great things to make front-end automation tools available to all developers on the floor. Coming from the dev group myself, I know that this has been a coveted possibility for many years. Now it is just a matter of letting everyone know it exists, hand holding a bit on creating their own first scripts, and then watching as opportunities and future possibilities unfold :)

Another member of the testing team is investigating API testing. We're collaborating to define a strategy. We've <a href="http://www.testinggeek.com/testing-restful-webservices-or-api-testing-remember-papas-be-sfo-deed-help-gc-and-dvla-pc">read this checklist</a> for inspiration, and we're being vigilant for aspects that could be checked with automation. An API seem like a natural fit for <strong>Functional</strong> checks, seeing as the longterm actor for it is another inhuman system. Lots of items from that checklist require human interaction and interpretation (especially in the <strong>Consumable</strong> category). I am unsure of how to test something like <em>ease of use</em> of an API that has hundred of end points and variations on each of those. Then again, I suppose the answer is in the question: if it is so large it has become daunting it might inherently not be easy to use...

Lots of thinking going on, and lots of passionate people. I look forward to the surprises next week may entail.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2014-01-24 02:40:22</wp:post_date>
  <wp:post_date_gmt>2014-01-24 02:40:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>changing-gears</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Week 2 - APIs With Context</title>
  <link>http://jrclarkin.wordpress.com/2014/01/30/apis-with-context/</link>
  <pubDate>Thu, 30 Jan 2014 12:20:56 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=23</guid>
  <description/>
  <content:encoded><![CDATA[This week was spent gaining context on APIs. Questions such as:
<ul>
	<li>Who are the consumers of the APIs</li>
	<li>What is the minimum viable check we want in place for a single API</li>
	<li>What checks are currently being created by developers</li>
	<li>What aspects of the <a href="http://www.testinggeek.com/testing-restful-webservices-or-api-testing-remember-papas-be-sfo-deed-help-gc-and-dvla-pc">API Checklist</a> are of value to a specific group</li>
	<li>What ways can we black box test an API</li>
	<li>What ways do we want to white box check the API</li>
</ul>
We created a diagram of the parts of the white box API framework
+ which layers are being checked via JUnit
+ who are the authors of each layer of checks

This gave me a better understanding of the direction of functionally verifying our API. So the majority of my week was experimentation. My goal was to make it easier for developers to author JUnit checks. My petri dishes are being reviewed, and the results are in the mail :)

There are still a lot of unexplored territory, especially around API consumability. Next week we're going to mindmap what we think we know, and what we think we need to know. That should help give focus to our efforts.

I suspect that communicating our gathered information might be a key next step.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2014-01-30 12:20:56</wp:post_date>
  <wp:post_date_gmt>2014-01-30 12:20:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>apis-with-context</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Introspection - How Long Have I Been Testing</title>
  <link>http://jrclarkin.wordpress.com/?p=39</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=39</guid>
  <description/>
  <content:encoded><![CDATA[I have played the role of <strong>Developer</strong> for the better part of a decade. During that time, the concept of testing has been present but ancillary to creating <em>new things</em>.

Now that I am changing my focus to be a tester and refining my understanding of the nuances of this large domain... I am starting to wonder: have I always been a tester? Maybe yes, but neither consciously aware of it nor a very good one at that.

Now may be a good time to inject some core testing definitions (courtesy of <a href="http://www.satisfice.com/blog/archives/856">Bolton &amp; Bach</a>):
<blockquote><strong>Testing</strong><em> is the process of evaluating a product by learning about it through experimentation, which includes to some degree: questioning, study, modeling, observation and inference.</em></blockquote>
<blockquote><strong>Checking</strong><em> is the process of making evaluations by applying algorithmic decision rules to specific observations of a product.</em></blockquote>
<h1>Check it out</h1>
As a developer, checking has explicitly been part of my responsibilities.

[more, JUnit, maintainable &amp; understandable code, information to future self or others]

[managing JUnit pass rates, performing scripted tests at release]

[Sonar, architecture, code rules, process of code reviews, ...]
<h1>Test the waters</h1>
[questioning and learning]

[designer, UX, architecture]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2014-01-31 19:59:41</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
</item>
<item>
  <title>Week 4 - Informed Failure</title>
  <link>http://jrclarkin.wordpress.com/2014/02/15/informed-failure/</link>
  <pubDate>Sun, 16 Feb 2014 01:57:30 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=61</guid>
  <description/>
  <content:encoded><![CDATA[I worked on a new tool for Selenium JUnit testing: video recording of test execution. There are some good articles on how to utilize Monte Media Library for Java to add recording to your code. However, I did not see anything that took advantage of <a href="http://junit.org/">JUnit 4</a> functionality, such as <a href="https://github.com/junit-team/junit/wiki/Rules">Rules</a>. Therefore, I have married the two together into a custom rule that lets you specify on which TestResult conditions to record a video: Success, Failure, or Error.

<span style="line-height:1.5em;">The goal of this tool is to make it faster to diagnose why a check has failed. The sooner information is provided to a stakeholder, the greater the value. I am guessing that check failure is either an indication of broken value in the product, or broken checking. Having videos to compare against a known working state will be handy.</span>

I imagine this may be useful for other Selenium users, so here is the gist:

https://gist.github.com/jclarkin/5fe969ce98d4890c89dc

Thanks goes to <a href="http://www.randelshofer.ch/monte/">Monte Media Library</a>  and <a href="http://roadtoautomation.blogspot.ca/2013/03/screen-recording-video-of-java-webdiver.html">Road to Automation</a> for the tools to solve my problem.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2014-02-15 20:57:30</wp:post_date>
  <wp:post_date_gmt>2014-02-16 01:57:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>informed-failure</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tumblr_mztst3W0OR1sfie3io1_1280[1]</title>
  <link>http://jrclarkin.wordpress.com/?attachment_id=72</link>
  <pubDate>Thu, 20 Feb 2014 12:47:37 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.files.wordpress.com/2014/02/tumblr_mztst3w0or1sfie3io1_128012.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2014-02-20 07:47:37</wp:post_date>
  <wp:post_date_gmt>2014-02-20 12:47:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tumblr_mztst3w0or1sfie3io1_12801</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://jrclarkin.files.wordpress.com/2014/02/tumblr_mztst3w0or1sfie3io1_128012.jpg</wp:attachment_url>
</item>
<item>
  <title>cropped-tumblr_mztst3w0or1sfie3io1_128012.jpg</title>
  <link>http://jrclarkin.wordpress.com/?attachment_id=73</link>
  <pubDate>Thu, 20 Feb 2014 12:47:59 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.files.wordpress.com/2014/02/cropped-tumblr_mztst3w0or1sfie3io1_128012.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://jrclarkin.files.wordpress.com/2014/02/cropped-tumblr_mztst3w0or1sfie3io1_128012.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>73</wp:post_id>
  <wp:post_date>2014-02-20 07:47:59</wp:post_date>
  <wp:post_date_gmt>2014-02-20 12:47:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-tumblr_mztst3w0or1sfie3io1_128012-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://jrclarkin.files.wordpress.com/2014/02/cropped-tumblr_mztst3w0or1sfie3io1_128012.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/twentyfourteen</wp:meta_key>
    <wp:meta_value><![CDATA[1394029583]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/twentyfourteen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Virtual and Physical</title>
  <link>http://jrclarkin.wordpress.com/2014/02/23/virtual-and-physical/</link>
  <pubDate>Sun, 23 Feb 2014 12:00:25 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=80</guid>
  <description/>
  <content:encoded><![CDATA[It is time to start learning about virtual machines. Microsoft is kindly offering up <a href="http://www.modern.ie/en-us/virtualization-tools">free VMs to do browser testing</a>. I find this exciting. Where I work we often have physical machines to host different Operating Systems, to accommodate different versions of our software. At least now from a testing perspective, in regard to <strong>client-side</strong> investigation, no one needs to pay Microsoft license fees just to see how a webpage renders in Internet Explorer.

This got me thinking that it would be equally beneficial to have VM Templates setup for the server side. With supporting more than one version of our product, it is often time consuming to setup a working server environment just for play.

I am hoping to learn enough to achieve virtualization of the server side for 'already released' editions of our software. Then I can turn my eye towards getting VMs auto-created as part of continuous integrations..!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2014-02-23 07:00:25</wp:post_date>
  <wp:post_date_gmt>2014-02-23 12:00:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>virtual-and-physical</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>CAST 2014</title>
  <link>http://jrclarkin.wordpress.com/2014/02/25/cast-2014/</link>
  <pubDate>Wed, 26 Feb 2014 02:20:09 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=82</guid>
  <description/>
  <content:encoded><![CDATA[On my first day in my new job, my boss threw out a challenge to me: submit a proposal to <a href="http://www.associationforsoftwaretesting.org/conference/cast-2014/">CAST</a> for a conference talk I could give. The submission due date was is 42 hours...

CAST  is the annual Conference for the <a href="http://www.associationforsoftwaretesting.org/">Association of Software Testing</a>. It does not align with my typical impression of conferences: payed for by industry corporations, presenters with hidden agendas to line their pockets, and a general feeling of a shark-tank with chum. Instead, to me it sounds more like a University type of conference: sessions meant for discussion and growth for both the attendees and the presenter, and not linked directly to profits.

So, back to my challenge. I succeeded at selecting a topic of interest to me and outlining enough information that I believe I could grow it into a 40 minute presentation. I wrote up a proposal and emailed it into the cyber-nether.

My letter made it to <a href="http://www.testassured.com/">Bernie Berger</a> &amp; <a href="http://testingthoughts.com/">Paul Holland</a>, the co-chairs of the conference. And most surprising to me, I have been selected to present this August in New York City!

It is a big responsibility, and definitely an honour to have been selected. I have a lot of work ahead for creating an engaging and educational presentation that is worthy of the time of my peers.

It will a first for me in many regards: trip to NY, attending a conference in my profession, presenting to a crowd outside of my employer, planning and booking travel to the United States of America, preparing myself for my first encounter with the TSA scanners... :)

<span style="line-height:1.5;">Wish me luck !</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2014-02-25 21:20:09</wp:post_date>
  <wp:post_date_gmt>2014-02-26 02:20:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cast-2014</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="education"><![CDATA[Education]]></category>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Automated Algorithmic Attack</title>
  <link>http://jrclarkin.wordpress.com/?p=86</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=86</guid>
  <description/>
  <content:encoded><![CDATA[Creating a suite of checks

Creating API checks tied to fuzzy inputs to allow for dynamic creation

Pattern watching test failures/success for Baysian probabilities

Attacking (testing) the APIs based on the machine learning to determine if the failure is systemic

Evolutionary algorithms to avoid local maximas of failure opportunities]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2014-03-05 08:29:18</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
</item>
<item>
  <title>Test Sessions - Research Sessions</title>
  <link>http://jrclarkin.wordpress.com/2014/03/10/test-sessions-research-sessions/</link>
  <pubDate>Mon, 10 Mar 2014 21:29:21 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=90</guid>
  <description/>
  <content:encoded><![CDATA[My responsibilities include researching and investigating tools to help others test software. I was recently asked to investigate options for helping developers author Unit Tests for Javascript applications.

While thinking about performing the investigation, it came to me that I was testing something: a domain of knowledge. And what is a good tool to record such testing? <a href="http://en.wikipedia.org/wiki/Session-based_testing">Test Sessions</a>!

So, I am experimenting with this idea. I gave thought to my mission, wrote up an initial charter of exploration ideas, and have begun recording my path through the internet and contacts to learn more on Javascript unit testing.  Once I wrap it up, I will likely have more charters to explore and can try my hand at my first test report to hand back to the person requesting this information :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2014-03-10 16:29:21</wp:post_date>
  <wp:post_date_gmt>2014-03-10 21:29:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-sessions-research-sessions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Research Session - Javascript Unit Testing</title>
  <link>http://jrclarkin.wordpress.com/2014/03/12/research-session-javascript-unit-testing/</link>
  <pubDate>Wed, 12 Mar 2014 16:11:49 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=92</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Report Summary</strong>:
<ul>
	<li>Much like the rest of the Javascript ecosystem, there are a lot of options for any given problem and not a lot of community consensus</li>
	<li>There are two aspects of JS testing needing to be addressed: tools to test (libraries) and tools to report results (test runners)</li>
	<li>When selecting libraries, there are two style choices: <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">TDD</a> (Test Driven Development) vs. <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank">BDD</a> (Behaviour Driven Development)
Historically, our company has been more comfortable with TDD</li>
	<li><a href="http://chaijs.com/" target="_blank">Chai.js</a> is a TDD library that looks like a good place to begin learning and experimenting with test authoring</li>
	<li>Still not sure of pros/cons between test runners</li>
	<li>Further analysis plans
<ul>
	<li>Follow up with this question to the <a href="http://ottawajs.org/" target="_blank">OttawaJS</a> community on March 20th</li>
	<li>Attend <a href="http://www.sitepen.com/site/intern.html">Webinar on theintern.io</a> on March 20th</li>
	<li>Experiment with TDD library <a href="http://chaijs.com/" target="_blank">Chai.js</a> and its test runner</li>
	<li>Experiment with test runner <a href="http://theintern.io/" target="_blank">theinter.io</a></li>
</ul>
</li>
</ul>
<span style="line-height:1.5;">Session notes below the fold...</span>

<strong><!--more--></strong>

<strong>Mission</strong>: To determine and select tools for Javascript test scripting

<strong>Charter</strong>:
<ul>
	<li>Google search for tool options</li>
	<li>Explore theintern.io (mentioned by an awesome colleague)</li>
	<li>Compare QUnit vs. Jasmine (previous knowledge)</li>
</ul>
<strong>Recording of Session</strong>:
<ul>
	<li>Found <a href="http://stackoverflow.com/questions/300855/javascript-unit-test-tools-for-tdd" target="_blank">this StackOverflow post</a> with a large list of tools. Looks a bit out of date, but is a good start.</li>
</ul>
<ul>
	<li><a href="http://jasmine.github.io/" target="_blank">Jasmine</a> supports <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank">BDD</a>. Comes with equivalent ideas to <a href="http://hamcrest.org/JavaHamcrest/" target="_blank">Hamcrest Matchers</a>. Our dev team has not yet successfully assimilated BDD, so this is not a strong incentive for adoption.</li>
</ul>
<ul>
	<li><a href="http://qunitjs.com/" target="_blank">QUnit</a> site has some good material on refactoring code to become scriptable. Pretty execution display as an HTML file. Not seeing the big picture on how this would work in a CI environment.</li>
</ul>
<ul>
	<li>If we are just looking for a library to make assertions easier (like JUnit) then bare-bones might be the best.</li>
</ul>
<ul>
	<li><a href="http://chaijs.com/" target="_blank">Chai.js</a> seems like a lightweight assertion library. Worth consideration for initial practice authoring testable code.</li>
</ul>
<ul>
	<li><a href="http://www.browserswarm.com/" target="_blank">BrowserSwarm</a> is very cool. But it is a commercial offering of <a href="http://testswarm.signalr.net/" target="_blank">TestSwarm</a>. TestSwarm is also cool. A tool where any device can register to the swarm to execute JS test files. The project does not look highly active.... Is this due to it being fairly stable or that people have found a different path?</li>
</ul>
<ul>
	<li>This brings a key question to light: test execution and reporting methods. This is really going to be the key to valuable tests...</li>
</ul>
<ul>
	<li>On to touch base with <a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript" target="_blank">Wiki list of JS Test frameworks</a>
To further explore: Unit.js, Mocha, Sinon.js</li>
</ul>
<ul>
	<li><a href="https://en.wikipedia.org/wiki/Unit.js" target="_blank">Unit.js</a> looks similar to Chai.js and Jasmine.</li>
</ul>
<ul>
	<li><a href="http://visionmedia.github.io/mocha/" target="_blank">Mocha.js</a> is not a library, but a framework. It runs on Node, and is popular amongst the OttawaJS presenters last year. Uses 4 libraries to offer Asserts and BDD notation in test cases (should.js, expect.js, chai.js, &amp; better-assert). Comes with classic JUnit style before/after/beforeEach/afterEach. Pretty reporting to the console, or a variety of formats (TAP, JSON, CLI, HTML, XUnit, ...).</li>
</ul>
<ul>
	<li>Sinon.js is a library in the vein of Mockito. Looks handy... but too advanced for our current needs. Keep in mind if mocking topic comes up.</li>
</ul>
<ul>
	<li>Onto look into <a href="http://theintern.io" target="_blank">theintern.io</a>, from Dave. He sent a webinar for March 20th (I've signed up). Now on to exploring the site/examples.
<ul>
	<li>Looks to provide Test Execution with test authoring. Uses chai.js for asserts and expect.js for behaviour. Looks similar to authoring JUnit tests, with BDD and TDD support. Examples of how to have it execute Selenium over remote. Examples of using <a href="https://saucelabs.com/" target="_blank">SauceLabs</a> for multi-platform testing (Saucelabs not available for intranet activities). Good <a href="https://github.com/theintern/intern-tutorial" target="_blank">example of code here</a>.</li>
	<li>Test running can be Node, your browser, SauceLabs, Selenium Grid</li>
	<li><a href="http://theintern.io" target="_blank">theintern.io</a> seems the most promising at this point and worth deeper investigation (hands on experimentation).</li>
</ul>
</li>
</ul>
<ul>
	<li>Listened to the recent <a href="http://hanselminutes.com/412/getting-started-with-javascript-unit-testing-with-jasmine-and-rushaine-mcbean" target="_blank">Hanselminutes podcast</a> on Javascript UT. Focused on explaining Jasmine, and BDD. Was interesting and pointed out that there are add-ons for Jasmine to tackle specific JS things (like jQuery and ajax).</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2014-03-12 11:11:49</wp:post_date>
  <wp:post_date_gmt>2014-03-12 16:11:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>research-session-javascript-unit-testing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Research Session - JS UT Experimentation</title>
  <link>http://jrclarkin.wordpress.com/2014/03/21/research-session-js-ut-experimentation/</link>
  <pubDate>Fri, 21 Mar 2014 20:18:08 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=99</guid>
  <description/>
  <content:encoded><![CDATA[<span style="line-height:1.5;">Recommend starting with </span><a style="line-height:1.5;" href="http://chaijs.com/" target="_blank">Chai.js</a><span style="line-height:1.5;"> + </span><a style="line-height:1.5;" href="http://visionmedia.github.io/mocha/">Mocha</a><span style="line-height:1.5;">, and </span><a style="line-height:1.5;" href="http://sinonjs.org/" target="_blank">Sinon.js</a><span style="line-height:1.5;"> for mocking when necessary. </span>

<span style="line-height:1.5;">A lot of the test libraries available are similar, so it is hard to go wrong. Chai.js appears to be commonly used and also integrated into larger frameworks. Since Chai is just a test authoring library, there is still need for a tool to execute the tests. For current needs, Mocha has good support and a lot of reporting output options. At this point, the added benefits provided by theintern.io do not add immediate value for me, but transitioning to it from Mocha should not be difficult.</span>

<span style="line-height:1.5;">Further analysis plans</span>
<ul>
	<li>Look into Test Runner outputs and how they might integrate into JUnit reports</li>
</ul>
Simplistic examples created during experimentation can be found on <a href="https://github.com/jclarkin/javascript-test-frameworks" target="_blank">Github here</a>.

Session notes below the fold...

<!--more-->
<div><strong>Mission</strong>: Attempt to create JSUT (Javascript Unit Test) using simple libraries</div>
<div><strong>Charter</strong>:</div>
<div>
<ul>
	<li>Create some executable tests using <a href="http://chaijs.com/" target="_blank">Chai.js</a></li>
	<li>Follow traditional JUnit TDD patterns rather than BDD</li>
	<li>(added) Explore BDD experiments as well</li>
</ul>
</div>
<div></div>
<div><strong>Session</strong>:</div>
<ul>
	<li>Start: March 19, 2014</li>
	<li>Experiment: Attempted to figure out <a href="http://chaijs.com/" target="_blank">Chai.js</a></li>
	<li>Fail: could not solve how to run the tests</li>
	<li>Experiment: Moving on to <a href="https://qunitjs.com/" target="_blank">QUnit</a> to warm my experience</li>
	<li>Success: got a simple sample of QUnit tests and runner executing</li>
	<li>Discovery: Chai.js does not have a test runner. We need to pick one to execute the chai tests</li>
	<li>Experiment: Chai.js with Mocha as the test runner</li>
	<li>Fail: Having trouble setting it up.</li>
	<li>Learn: Found these <a href="https://github.com/Bartvds/chai-tdd-plugins" target="_blank">cool chai.js plugins</a> that could be useful: helpers for statistics, jquery, http processing, and more</li>
	<li>Learn: Found <a href="https://gist.github.com/maicki/7781943" target="_blank">this article</a> to help me out</li>
	<li>Success: After much initial confusion, I have successfully authored some simple tests that I can run via HTML in a browser</li>
	<li>Learn: Visit from <a href="https://twitter.com/snocorp" target="_blank">@snocorp</a> has convinced me that it is silly to ignore BDD due to historic corporate aversion to change
Increasing the charter to include BDD experimentation</li>
	<li>Experiment: Create a BDD version of the chai-mocha tests</li>
	<li>Fail: Trouble getting the 'throw' scenario to work...
Trying a success and fail case to ensure my understanding...</li>
	<li>Success: Added test cases for both throw and not throw to ensure understanding</li>
	<li>Experiment: Setup a <a href="http://jasmine.github.io/" target="_blank">Jasmine</a> test suite (BDD library and runner combined)</li>
	<li>Success:
<ul>
	<li>very easy to use</li>
	<li>nearly identical to the chai-mocha-bdd experiment</li>
</ul>
</li>
	<li>Learn: Based on my initial research report, there exists <a href="http://unitjs.com/" target="_blank">Unit.js</a>
<ul>
	<li>I misunderstood it with initial research</li>
	<li>It is a library that contains the following micro-libraries
<ul>
	<li>Mocking via <a href="http://sinonjs.org/" target="_blank">Sinon.js</a></li>
	<li>BDD via <a href="https://github.com/moll/js-must" target="_blank">Must.js</a> + <a href="https://github.com/visionmedia/should.js/" target="_blank">Should.js</a> + <a href="https://github.com/LearnBoost/expect.js/" target="_blank">Expect.js</a></li>
	<li>TDD via <a href="http://nodejs.org/api/assert.html" target="_blank">Node assert</a></li>
</ul>
</li>
	<li>It does not have a Test Runner, but it recommends Mocha as a decent starting point</li>
</ul>
</li>
	<li>Paused - End of workday</li>
	<li>Start: March 20, 2014</li>
	<li>Learn: Audit the "theintern.io" webinar
<ul>
	<li>Good presentation</li>
	<li>An alternate Test Runner to mocha</li>
	<li>Supports JS tests and Selenium (may require setting up a Selenium Grid to communicate to)</li>
	<li>Easy integration to Saucelabs (which can work in a secured environment via a secured tunnel)</li>
	<li>Covered AJAX mocking using AMD and replacing the default map of loaders at Setup, and reverting at teardown</li>
	<li>Framework built with Dojo</li>
	<li>Chai for assertions</li>
	<li>Istanbul for Code coverage</li>
	<li>Need to research and better understand Test Reports/Outputs</li>
</ul>
</li>
	<li>Learn: Attended OttawaJS Meetup
<ul>
	<li>Confirmed that my research is on the right tools/libraries/frameworks</li>
	<li>Was recommended to look into <a href="http://karma-runner.github.io/" target="_blank">Karma</a> test runner (previously called Testacular)</li>
</ul>
</li>
	<li>Paused - End of workday</li>
	<li>Start: March 21, 2014</li>
	<li>Learn: Karma test runner
<ul>
	<li>Looks as good for test running as the alternative so far</li>
	<li>Has nice automation abilities similar to <a href="http://gruntjs.com/" target="_blank">Grunt</a></li>
	<li>Requires <a href="http://nodejs.org/" target="_blank">Node.js</a></li>
</ul>
</li>
	<li>Explain: Create summary of research</li>
	<li>Share: Place learning material into a <a href="https://github.com/jclarkin/javascript-test-frameworks" target="_blank">public repo</a> for others to also learn from it</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2014-03-21 15:18:08</wp:post_date>
  <wp:post_date_gmt>2014-03-21 20:18:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>research-session-js-ut-experimentation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Research Session - Reporting Outputs of Automation</title>
  <link>http://jrclarkin.wordpress.com/2014/04/01/research-session-reporting-outputs-of-automation/</link>
  <pubDate>Tue, 01 Apr 2014 13:34:09 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=106</guid>
  <description/>
  <content:encoded><![CDATA[There is an underwhelming quantity of test reporting options. The protocols for integration are few (<a href="http://stackoverflow.com/questions/442556/spec-for-junit-xml-output" target="_blank">XUnit</a> and <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol" target="_blank">TAP</a>) and the few tools that I found are not focused on reporting.

If adopting a reporting tool, I would recommend using <a href="http://www.sonarqube.org/" target="_blank">SonarQube</a>. If using this tool, then the report output best supported is XUnit.

An alternative approach would be to build a custom reporting tool and dashboard, that reflects the team's Domain Model and surfaces only relevant information.

Session notes below the fold…

<!--more-->
<div><strong>Mission</strong>: Look into UT reporting formats and opportunities to integrate results from different frameworks</div>
<div><strong>Charter</strong>:</div>
<div>
<ul>
	<li>Research outputs from Mocha test runner</li>
	<li>Research outputs from JUnit</li>
	<li>Find commonalities for producing a single report</li>
</ul>
</div>
<div></div>
<div><strong>Session</strong>:</div>
<ul>
	<li>Start: March 24, 2014</li>
	<li>Learn: Read about the many default outputs of <a href="http://visionmedia.github.io/mocha/#reporters" target="_blank">Mocha<br /></a>The key options appear to be TAP, JSON, DOC/HTML, XUnit
<ul>
	<li>JSON output is clean, but not a defined spec to exist in other tools</li>
	<li>DOC/HTML: Functional for reporting, but not integratable with other tools</li>
	<li>TAP (Test Anything Protocol): Cool, this one is a spec and meant to allow cross-communication</li>
	<li>XUnit: The Mocha website does not offer any documentation on what this is... Needs further investigation</li>
</ul>
</li>
	<li>Learn: XUnit. Looks like this Mocha option is <a href="https://groups.google.com/forum/#!topic/nodejs/E3UgP58K3YU" target="_blank">the same</a> as the default output from JUnit
<ul>
	<li>Ownership of this spec is not clear. May be Apache, may be Surefire...</li>
	<li>Looks like a good starting point if only Mocha and JUnit reports need to be integrated</li>
</ul>
</li>
	<li>Learn: What TAP options are there
<ul>
	<li>A Java TAP Producer exists for JUnit and TestNG called <a href="http://tap4j.org/" target="_blank">tap4j</a></li>
	<li><a href="http://www.slideshare.net/adrianh/tap-4763472" target="_blank">Good slides</a> on TAP and trying to integrate small suites into a single reporting solution<br />Potential integration platforms: Sonar, TestLink, Smolder</li>
</ul>
</li>
	<li>Test Reporters
<ul>
	<li><a href="http://www.sonarqube.org/" target="_blank">Sonar</a>: Most polished of the 3 options. Provides more than just script report execution, but also code coverage, code quality evaluation, and more<br />Doesn't seem to <a href="http://sonarqube.15.x6.nabble.com/Fwd-Sonar-with-Mocha-Unit-testing-td4999961.html" target="_blank">support TAP</a></li>
	<li><a href="http://sourceforge.net/projects/testlink/" target="_blank">TestLink</a>: Focused on being a CMS (Content Management System) for test cases and scenarios, with support for uploading script reports</li>
	<li><a href="http://sourceforge.net/projects/smolder/" target="_blank">Smolder</a>: Similar to TestLink, but with less documentation. Looks more user-friendly, but has less support</li>
</ul>
</li>
	<li>Read article "<a href="http://dailyjs.com/2013/10/21/tap/" target="_blank">Why Dont You use TAP?</a>"</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>106</wp:post_id>
  <wp:post_date>2014-04-01 08:34:09</wp:post_date>
  <wp:post_date_gmt>2014-04-01 13:34:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>research-session-reporting-outputs-of-automation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JavaScript Unit Testing</title>
  <link>http://jrclarkin.wordpress.com/2014/04/11/javascript-unit-testing/</link>
  <pubDate>Fri, 11 Apr 2014 16:10:40 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=108</guid>
  <description/>
  <content:encoded><![CDATA[<i>Note: The recommendations I make in this report are specific to the contextual needs of my current team. Your mileage may vary :)</i>

<h2>Summary</h2>

The goal of this research was to determine tools and techniques to empower developers in unit testing JavaScript applications. The research discovered that there are three distinct aspects of JS unit testing:

<ul>
    <li>Authoring checks: the means of writing the unit tests</li>
    <li>Executing scripts: the frameworks that execute the checks</li>
    <li>Reporting: displaying the execution results in a consistent and valued format</li>
</ul>

For authoring, the recommendation is to use the <a href="http://chaijs.com/">Chai.js</a> library and to write checks in a behaviour driven development (BDD) format. For execution, the recommendation is to use <a href="http://visionmedia.github.io/mocha/#reporters">Mocha</a> as it has the most versatility to integrate into an existing Continuous Integration (CI) system. For reporting, the recommendation is to either use <a href="http://www.sonarqube.org/">SonarQube</a> if looking for tracking history and other code quality metrics, or to create a custom reporter that suits the team’s needs.

<h2>Authoring Checks</h2>

As is typical in the JavaScript world, given any one need there exists many similar libraries and frameworks to solve the problem. This remains true for unit test helpers. To further conflate selection, some libraries offer both authorship and execution in a single framework (see Table 1).

The largest dichotomy between library selections is the supported writing style: do you want checks to be written as asserts (typically labelled at TDD for Test Driven Development) or as describing behaviour (BDD). Assertions are the more traditional pattern (see Code 1), but behavioural is more readable enabling increased visibility of risk to Product Owners and Business Analysts (see Code 2).

<table style="border:1px solid black;"><tbody><tr><td>
<img src="https://dl.dropboxusercontent.com/u/678756/blog/JSUT-1.png" />
<em>Code Sample 1: TDD Style Unit Testing</em>
</td></tr></tbody></table>

&nbsp;

<table style="border:1px solid black;"><tbody><tr><td>
<img src="https://dl.dropboxusercontent.com/u/678756/blog/JSUT-2.png" />
<em>Code Sample 2: BDD Style Unit Testing</em>
</td></tr></tbody></table>

&nbsp;

The selection of libraries and frameworks is simplified by comparing these aspects (see Table 1).

<table style="border:1px solid black;">
<thead>
<tr>
<td width="126"><strong>Name</strong></td>
<td width="124"><strong>TDD Style</strong></td>
<td width="124"><strong>BDD Style</strong></td>
<td width="116"><strong>Authoring</strong></td>
<td width="133"><strong>Execution</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td width="126"><strong>Chai.js</strong></td>
<td width="124">Yes</td>
<td width="124">Yes</td>
<td width="116">Yes</td>
<td width="133">No</td>
</tr>
<tr>
<td width="126"><strong>QUnit</strong></td>
<td width="124">Yes</td>
<td width="124">No</td>
<td width="116">Yes</td>
<td width="133">Yes</td>
</tr>
<tr>
<td width="126"><strong>Jasmine</strong></td>
<td width="124">No</td>
<td width="124">Yes</td>
<td width="116">Yes</td>
<td width="133">Yes</td>
</tr>
<tr>
<td width="126"><strong>Unit.js</strong></td>
<td width="124">Yes</td>
<td width="124">Yes</td>
<td width="116">Yes</td>
<td width="133">No</td>
</tr>
<tr>
<td width="126"><strong>Mocha</strong></td>
<td width="124">No</td>
<td width="124">No</td>
<td width="116">No</td>
<td width="133">Yes</td>
</tr>
<tr>
<td width="126"><strong>Test Swarm</strong></td>
<td width="124">No</td>
<td width="124">No</td>
<td width="116">No</td>
<td width="133">Yes</td>
</tr>
<tr>
<td width="126"><strong>Buster.js</strong></td>
<td width="124">Yes</td>
<td width="124">Yes</td>
<td width="116">Yes</td>
<td width="133">Yes</td>
</tr>
<tr>
<td width="126"><strong>Intern.io</strong></td>
<td width="124">No</td>
<td width="124">No</td>
<td width="116">No</td>
<td width="133">Yes</td>
</tr>
</tbody>
</table>

&nbsp;

<em>Table 1: JavaScript Unit Test Frameworks Compared</em>

Basing a choice on the “<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>” a framework focused on authoring was recommended: <strong>Chai.js</strong>. It is versatile, supporting both TDD and BDD coding styles. It is well supported online. Most importantly, checks written using it can easily be ported to another library if so desired.

<h2>Executing Scripts</h2>

&nbsp;

With authoring selected, the next aspect to be solved is execution of these unit test scripts. There are two primary scenarios for execution: developers verifying their programs and systems (continuous integration) checking for unexpected impacts to the system.

&nbsp;

To enable developers to verify their creations, keeping a simple workflow for execution is desired. Most Test Executors have a server based aspect (like running on a Node.js server), as well as browser based execution. The authoring of a browser executor should be intuitive for developers (see Code 3).

&nbsp;

For integrating to a system, it must support command-line execution, and offer outputs that can be fed to a reporting solution.
&nbsp;

<table style="border:1px solid black;"><tbody><tr><td>
<img src="https://dl.dropboxusercontent.com/u/678756/blog/JSUT-3.png" />
<em>Code Sample 3: Mocha Test Executor</em>
</td></tr></tbody></table>

For similar reasons as the selection of authoring tools, <strong>Mocha</strong> is recommended. It is well supported, and it would easy to port a solution to another executor if ever needed. Also, it offers the most execution output options of the frameworks considered.

<h2>Reporting Results</h2>

Surprisingly, there are not a lot of Off-the-Shelf reporting tools for unit tests (or other automated checks) nor report output formats. There are generally two reporting formats with spotty support: <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> and <a href="http://stackoverflow.com/questions/442556/spec-for-junit-xml-output">XUnit</a>. Similarly, for reporting tools, only these three options were found: <a href="http://www.sonarqube.org/">SonarQube</a>, <a href="http://sourceforge.net/projects/testlink/">TestLink</a>, and <a href="http://sourceforge.net/projects/smolder/">Smolder</a>.

&nbsp;

Both Smolder and TestLink are focused on content management of test specifications, plans, and requirements. SonarQube is focused on code analysis and reporting metrics that may indicate overall product quality. For reporting, if already using one of these tools, it is worth investigating the results of integrating JavaScript unit tests. However, it may be overkill for some teams and may be difficult to migrate to a different future solution if keeping the report history is important.

&nbsp;

Since Mocha offers output in both TAP and XUnit, it could be sufficient to build a custom reporting tool that processes these outputs and displays the state of all checks. If the goal is to never leave checks failing, a custom reporter would be a better choice. It would be designed to only display information relevant to the team (see Image 1).
&nbsp;

<table style="border:1px solid black;"><tbody><tr><td>
<img src="https://dl.dropboxusercontent.com/u/678756/blog/JSUT-4.png" />
<em>Image 1: Custom Domain-based Unit Test Reporter</em>
</td></tr></tbody></table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>108</wp:post_id>
  <wp:post_date>2014-04-11 11:10:40</wp:post_date>
  <wp:post_date_gmt>2014-04-11 16:10:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>javascript-unit-testing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Heuristic for selecting a Trainer</title>
  <link>http://jrclarkin.wordpress.com/2014/04/14/heuristic-for-selecting-a-trainer/</link>
  <pubDate>Mon, 14 Apr 2014 15:08:42 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=120</guid>
  <description/>
  <content:encoded><![CDATA[When looking at a potential coach or teacher, I find myself often using the following criteria to help me make a selection.

<ul>
    <li><strong>Openness</strong>: Do they expose their ideas and opinions in public forums? Do they allow discourse and feedback on their material, or is it a one-way channel?</li>
    <li><strong>Prior Art</strong>: Research material authored by the coach: articles, blog posts, videos, code, tweets, publications. Are ideas clearly expressed and compatible to your mode of learning?</li>
    <li><strong>Bias</strong>: Do they present multiple facets to ideas? Is there personal incentive for endorsing one idea over another?</li>
    <li><strong>Interpersonal</strong>: The "Play nice with others" factor. How to they behave in a group? Do they foster relationships and enable growth? Do they advocate for peers in their profession?</li>
    <li><strong>Referral</strong>: Use your network of both people you know or online personas you respect and see if any of them approve or refer to the trainer or their material.</li>
    <li><strong>Experience</strong>: Review the individual's listed skills, credentials, and experience. Can you trust them to bring authentic information that you believe applies to your needs?</li>
</ul>

This is not a comprehensive lists (all models are flawed). What questions do you ask yourself when evaluating potential mentors, coaches, trainers, or teachers?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>120</wp:post_id>
  <wp:post_date>2014-04-14 10:08:42</wp:post_date>
  <wp:post_date_gmt>2014-04-14 15:08:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>heuristic-for-selecting-a-trainer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="education"><![CDATA[Education]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Classification of Software Features</title>
  <link>http://jrclarkin.wordpress.com/2014/04/25/classification-of-software-features/</link>
  <pubDate>Sat, 26 Apr 2014 01:04:12 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[I typically hear two categories for software features: internal and external. Occasionally, from the development side, I hear of a third option: deprecated. I am proposing a fourth category, that I often find in enterprise software that I would call <em>vestigial</em>.

Here are my four categories defined:

<ul>
    <li><strong>External Feature</strong>: These are solutions for customer needs. They should produce value to the buyers of the software.</li>
    <li><strong>Internal Features</strong>: These are solutions for the company that produces the software. They reduce costs of maintaining and improving the software.</li>
    <li><strong>Deprecated Features</strong>: These are solutions once targeted internally or externally that are known to no longer produce significant value to keep. The are technical debt that is clearly flagged for removal.</li>
    <li><strong>Vestigial Features</strong>: These are a mystery. They likely were once solutions to someone, or at least intended to be so. Their current value is unknown and cannot be flagged for deprecation. They are technical debt with no mitigation strategy.</li>
</ul>

A <em>vestigial feature</em> is like the human appendix: maybe we don't need it anymore, but it remains part of our ecosystem. The tonsils were once vestigial until we learned more about them and determined their value.

Does your enterprise software have many vestigial features? We can form a test strategy to determine their original intent, their current uses, and estimate their value.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2014-04-25 20:04:12</wp:post_date>
  <wp:post_date_gmt>2014-04-26 01:04:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>classification-of-software-features</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding-software"><![CDATA[Coding]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Context Drive Testing - The Awakening</title>
  <link>http://jrclarkin.wordpress.com/2014/05/26/context-drive-testing-the-awakening/</link>
  <pubDate>Tue, 27 May 2014 00:42:21 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=124</guid>
  <description/>
  <content:encoded><![CDATA[It has been a progressive unraveling of my assumptions and understanding of what is the <a style="color:#047ac6;" href="http://context-driven-testing.com/">Context Driven</a> movement going on in testing. When Selena Delesie first arrived at my work to help facilitate our learning of the possibilities a title of "Software Tester" could be, I stood deep in the valley. Now, I am nowhere near the peak of this steep climb up the mountain, but my view is less foggy.

Much like the agile movement, the underlying goal is clear: <strong>apply critical thought</strong>. Do not just swap out one process for another, or blindly trust the instructions given to you by a colleague. Your key job as a member of a team is to apply your own opinion + experiences + knowledge + wisdom + subjectivity. You don't have to just a cog in an industrial machine: your unique brain can add value to the team's goals.

On the Twitterverse, I see an ongoing feud between two factions:

<ul>
    <li>In the red corner: <a style="color:#047ac6;" href="https://twitter.com/RBCS">Rex Black</a> and the <a style="color:#047ac6;" href="http://www.istqb.org/">ISTQB</a> certified community</li>
    <li>In the blue corner: <a style="color:#047ac6;" href="https://twitter.com/jamesmarcusbach">James Bach</a> and the <a style="color:#047ac6;" href="http://context-driven-testing.com/">CDT</a> community</li>
</ul>

<img class="aligncenter size-medium wp-image-130" src="http://jrclarkin.files.wordpress.com/2014/05/rockem-sockem-robots1.jpg?w=300" alt="rockem-sockem-robots1" />

While researching the Tester schism, I came across this wonderful paper on the Schools of Software Testing by <a style="color:#047ac6;" href="http://pettichord.com/" target="_blank">Bret Pettichord</a>:

<ul style="color:#000000;">
    <li>Analytic: Testing as form of mathematics</li>
    <li>Standards: Testing should be predictable &amp; repeatable, requiring little skill</li>
    <li>Quality: Testing adherence to processes and act as gate keepers</li>
    <li>Context-Driven: Testing as a human activity focused on finding and reporting on risks to value for stakeholders</li>
    <li>Agile: Testing as an automation-able dev activity to determine story completion and notify of change</li>
</ul>

For me, having these five schools defined makes the discussion more clear. The ISTQB comes from a Standards and Quality family where there exists Best Practices and repeatable patterns to solve testing challenges. The CDT crew disagree, favouring Heuristics to help perform testing.

Before moving on, lets address this question: What is the difference between 'Heuristic' and 'Best Practices' ? The term 'best practice' implies that it is the recommended solution to a problem. It does not come with an asterisk beside it leading to the small-print legalese warning its users that "Your Mileage May Vary". Instead, it sells the bearer a checklist of steps to follow to obtain the 'best results' without heeding the context dependent variables. The term 'heuristic' looks nearly the same: it provides a list of steps or terms to apply to a situation. The key is in the <a style="color:#047ac6;" href="http://en.wikipedia.org/wiki/Heuristic" target="_blank">definition of the word</a>: "a technique to solve problems that is not guaranteed to be optimal". There it is! By choosing a different word, the legal small-print needed for "Best Practice" has become the centerpiece of "Heuristic".

The CDT intentionally is choosing terminology to break from the mould and put the intelligent individual at the center of "Testing". Much like 'agile' it does not prescribe single solution to rule them all.
<img class="size-medium wp-image-129 aligncenter" src="http://jrclarkin.files.wordpress.com/2014/05/l_one_ring_gold_italian.jpg?w=300" alt="l_one_ring_gold_italian" width="300" height="300" />

<ul style="color:#000000;">
    <li>Does that mean there is no room for Analytic School of testing if you follow CDT? Nope! If your context suits mathematical metrics and proofs to decrease risk (and thus increase value), go for it!</li>
    <li>Does that mean there is no room for Agile School of testing? Nope. If devs authoring automated checks adds value to your project, go for it!</li>
</ul>

Thus, I think both sides of the feud are fighting for the same goals: how to help testers be masters of their craft. Their approaches and terminology differ, let alone their visions of the future state of the craft... We just need to remain empathetic to all sides as that is a great way to learn from each other and to slowly affect change.

For me, my vision s that we explorers strive to see past our logical fallacies and cognitive biases. We must <strong>apply critical thought</strong> to our problems and not blindly rely on "time tested best practices".

.. and that is why I choose the label of Context Driven Tester.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>124</wp:post_id>
  <wp:post_date>2014-05-26 19:42:21</wp:post_date>
  <wp:post_date_gmt>2014-05-27 00:42:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>context-drive-testing-the-awakening</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>l_one_ring_gold_italian</title>
  <link>http://jrclarkin.wordpress.com/2014/05/26/context-drive-testing-the-awakening/l_one_ring_gold_italian/</link>
  <pubDate>Tue, 27 May 2014 00:37:59 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.files.wordpress.com/2014/05/l_one_ring_gold_italian.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>129</wp:post_id>
  <wp:post_date>2014-05-26 19:37:59</wp:post_date>
  <wp:post_date_gmt>2014-05-27 00:37:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>l_one_ring_gold_italian</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>124</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://jrclarkin.files.wordpress.com/2014/05/l_one_ring_gold_italian.jpg</wp:attachment_url>
</item>
<item>
  <title>rockem-sockem-robots1</title>
  <link>http://jrclarkin.wordpress.com/2014/05/26/context-drive-testing-the-awakening/rockem-sockem-robots1/</link>
  <pubDate>Tue, 27 May 2014 00:38:10 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.files.wordpress.com/2014/05/rockem-sockem-robots1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>130</wp:post_id>
  <wp:post_date>2014-05-26 19:38:10</wp:post_date>
  <wp:post_date_gmt>2014-05-27 00:38:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rockem-sockem-robots1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>124</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://jrclarkin.files.wordpress.com/2014/05/rockem-sockem-robots1.jpg</wp:attachment_url>
</item>
<item>
  <title>Recent Reading - Agile Test Quadrants</title>
  <link>http://jrclarkin.wordpress.com/2014/07/25/recent-reading-agile-test-quadrants/</link>
  <pubDate>Fri, 25 Jul 2014 12:13:18 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=135</guid>
  <description/>
  <content:encoded><![CDATA[A coworker recently shared with me <a href="http://www.slideshare.net/ThoughtWorks/implementingcd-4131002155842phpapp02" target="_blank">this SlideShare presentation</a> from ThoughtWorks.

I had never seen the Agile Testing Quadrants model by Brian Marick, but I believe it will be useful in helping me communicate types of testing to the teams. There is currently an attitude forming that "We can test everything via automation. Programmers can test it all, with more code" which is fallacious, but change takes time. I am hoping that exposing people to different models and ideas will help accelerate understanding my perspective on the value of sapient testing.

Here is the diagram I am referencing
<img src="http://lisacrispin.com/wp-content/uploads/2011/11/Agile-Testing-Quadrants.png" alt="Agile Testing Quadrants Model" />

I now have a new book added to my To Do list: <a href="http://www.amazon.com/gp/product/0321534468/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321534468&amp;linkCode=as2&amp;tag=breacsilos-20&amp;linkId=TCLVNWFBOX4B3W3T">Agile Testing: A Practical Guide for Testers and Agile Teams</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=breacsilos-20&amp;l=as2&amp;o=1&amp;a=0321534468" width="1" height="1" border="0" alt="" style="border:none !important;margin:0!important;" />. Hopefully it will add even more tools to my belt for both testing software, and teaching about testing to developers.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>135</wp:post_id>
  <wp:post_date>2014-07-25 07:13:18</wp:post_date>
  <wp:post_date_gmt>2014-07-25 12:13:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>recent-reading-agile-test-quadrants</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing-software"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Running a Retrospective</title>
  <link>http://jrclarkin.wordpress.com/2014/08/15/running-a-retrospective/</link>
  <pubDate>Fri, 15 Aug 2014 12:41:25 +0000</pubDate>
  <dc:creator>jrclarkin</dc:creator>
  <guid isPermaLink="false">http://jrclarkin.wordpress.com/?p=138</guid>
  <description/>
  <content:encoded><![CDATA[This month, I ran my first retrospective for a different team at work. I’ve been participating in retrospectives run by my team mate and have wanted to try my hand at facilitating. When a different team approached me to host theirs, I was thrilled at the opportunity.</p>

<strong>Preparation</strong>

I was made aware that this team had been having retrospectives… but they were more similar to a status meeting than to a voyage of discovery and improvement. A week before the event, I went to talk to the gang to witness their environment and see their interactions. I posed whether they had any working agreements, and soon discovered that most members were shy when asked to share their opinions aloud to the group. They were most comfortable ideating in private and collaborating only as necessary. This information helped me tailor which activities would be least disruptive for their retrospective.

I proceeded to review the content of my two go-to books about retrospectives:<br />

<div style="text-align:center;">
<a href="http://www.amazon.com/gp/product/0977616649/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0977616649&amp;linkCode=as2&amp;tag=breacsilos-20&amp;linkId=B4G536I5PNV4EUWE" target="_top"><img src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=0977616649&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=breacsilos-20" alt="" /></a>
<p id="title"><a href="http://www.amazon.com/gp/product/0977616649/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0977616649&amp;linkCode=as2&amp;tag=breacsilos-20&amp;linkId=B4G536I5PNV4EUWE" target="_top">Agile Retrospectives: Making Good Teams Great</a></p>
</div>

and

<div style="text-align:center;">
<a href="http://www.amazon.com/gp/product/0596804172/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596804172&amp;linkCode=as2&amp;tag=breacsilos-20&amp;linkId=GEDRG4IJLKKJIO2H" target="_top"><img src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=0596804172&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=breacsilos-20" alt="" /></a>
<p id="title"><a href="http://www.amazon.com/gp/product/0596804172/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596804172&amp;linkCode=as2&amp;tag=breacsilos-20&amp;linkId=GEDRG4IJLKKJIO2H" target="_top">Gamestorming: A Playbook for Innovators, Rulebreakers, and Changemakers</a></p>
</div>

I selected a series of activities to get people talking, and to progress from individual contributions towards team decisions. With my outline in-hand, I was nervous but ready for the event.

<strong>The Event</strong>

I got to my room a half hour before the event. This gave me time to prep the room: move chairs to well distributed pattern, write the Agile Prime Directive on the whiteboard, get pens and cue cards out, display the agenda, and have poster board ready for categorization.

In standard corporate fashion, the team trickled in fashionably late (first 5 minutes). From there, I began facilitating the retrospective.

We began with “Set the Stage”. I recited the prime directive:<br />
<em>"Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”</em> --Norm Kerth 

I thanked everyone for willingly participating in the event, then we went over the agenda so that we all had a rough idea of the meeting’s pacing. Knowing that the crowd would not be forthcoming with opinions and participation, we started with a 1-2 Word Checkin activity as warm up. I was happy that we completed the circle with minimal protest.

Keeping everyone comfortable in their chairs, the “Gather Data” stage began with the “Four L’s” activity. Each person acts as an individual contributor, reflecting on the sprint, and categorizing their experiences as Liked, Learned, Lacked, r Longed For. During and after the 15 minutes, people were to place their sticky notes onto the appropriate 4 poster boards. 

Thus we segued into a team activity: split into two groups and each group was to consolidate &amp; summarize the data in 2 Ls (Liked and Lacked, or Learned and Longed For). Two presenters from each group were selected to share their discoveries with the team aloud.

In the “Decide What to Do” phase, we moved to an activity that got everyone physically out of their seats and moving about: Dot Voting on the found themes each person deemed most important. With all votes tallied, it was easy to spot the top 4 themes for further investigation. I requested people to pair off with a team mate that they had not worked with for the Ls activity. Each pair was assigned a theme for further brainstorming, on potential next actions. Once again, a member was requested to present their discoveries to the whole team. Members of the team chose to champion an item, to be followed up within the next sprint.

With the team aware of <em>Who</em> would do <em>What</em> by <em>When</em>, we moved onto “Closing” activities. I thanked the team again for their participation, and requested that they leave me feedback on how the retrospective went. I handed out the sticky notes and pens, told them to leave the mess as is in the room for me to clean up, and exited so that they could converse in private.

<strong>Aftermath</strong>

After about 10 minutes, they emerged looking energetic and ready to tackle new problems. I was happy to see that effect. I had not realized the anterior affect of retrospectives; they are not just an opportunity to find ways to improve efficiency, but act as a team building event to strengthen communication pathways and working relationships.

I returned to the room to put away the markers, stickers, and pens, to clean up the whiteboards and used stickies, and to reset the room to the state it had been prior to the fun we all just had. I looked over the feedback the team had left for me, and although it lacked any constructive criticism, it was filled with comments of people having a positive experience!  

<strong>Next Steps</strong>

I learned a lot from facilitating a retrospective, and already have been asked to facilitate for other teams. I plan on trying out different activities, and will come prepared to record the data as the activities occur. I also plan on trying to keep that new-team energy flowing after the retrospective and into their next tasks. I feel that is a hard challenge when you are not part of the team and thus not involved with the time directly after the meeting.

Having seen the event from the another perspective has given me greater appreciation of the benefits to retrospectives. I will now look forward to both participating in and facilitating these events in the months to come.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>138</wp:post_id>
  <wp:post_date>2014-08-15 07:41:25</wp:post_date>
  <wp:post_date_gmt>2014-08-15 12:41:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>running-a-retrospective</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="people"><![CDATA[People]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_mess</wp:meta_key>
    <wp:meta_value><![CDATA[undefined]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
